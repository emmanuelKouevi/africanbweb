{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API_RESET_PASSWORD_USER, HEADERS } from '../globalConfig/globalConstConfig';\nimport axios from 'axios';\nimport { required } from 'vuelidate/lib/validators';\nexport default {\n  name: \"changerPassword\",\n  data() {\n    return {\n      errorMsg: null,\n      successMsg: null,\n      overlay: null,\n      oldPasswordIsVisible: false,\n      newPasswordIsVisible: false,\n      userParams: {\n        email: null,\n        oldPassWord: null,\n        newPassWord: null\n      },\n      userReset: {\n        data: {\n          email: null,\n          oldPassWord: null,\n          newPassWord: null\n        }\n      }\n    };\n  },\n  validations: {\n    userParams: {\n      oldPassWord: {\n        required\n      },\n      newPassWord: {\n        required\n      }\n    }\n  },\n  methods: {\n    async retrieveUserInfo() {\n      /**\n       * RECUPERER LES DONNEES UTILISATEURS\n       */\n      if (this.$store.state.userAuthentified !== null) {\n        this.userParams.email = this.$store.state.userAuthentified.email;\n      }\n    },\n    // SOUMISSION DU FORMULAIRE\n    submitForm() {\n      this.$v.$touch();\n      if (this.$v.userParams.$invalid) this.errorMsg = \"Vous avez omis des champs de saisie\";else this.resetPasswordUser();\n    },\n    //CHANGER DE MOT DE PASSE\n    async resetPasswordUser() {\n      this.overlay = true;\n      this.userReset.data.email = this.userParams.email;\n      this.userReset.data.oldPassWord = this.userParams.oldPassWord;\n      this.userReset.data.newPassWord = this.userParams.newPassWord;\n      await axios.post(API_RESET_PASSWORD_USER, this.userReset, {\n        headers: HEADERS(this.$store.state.userAuthentified.token)\n      }).then(response => {\n        if (response.status == 200) {\n          if (response.data.status.code == 800) {\n            this.successMsg = response.data.status.message;\n            this.$swal.fire('Mot de Passe modifié', this.successMsg, 'success');\n            this.userReset.data.email = null;\n            this.userReset.data.oldPassword = null;\n            this.userReset.data.newPassword = null;\n          } else {\n            this.errorMsg = response.data.status.message;\n            this.$swal.fire('Erreur', this.errorMsg, 'error');\n            this.userReset.data.email = null;\n            this.userReset.data.oldPassWord = null;\n            this.userReset.data.newPassWord = null;\n          }\n        } else if (response.status == 204) {\n          this.warningMsg = \"Erreur , lors de la création\";\n          this.$swal.fire('Erreur', this.warningMsg, 'warning');\n          this.userReset.data.email = null;\n          this.userReset.data.oldPassWord = null;\n          this.userReset.data.newPassWord = null;\n        } else {\n          this.errorMsg = \"Erreur , opération de création impossible\";\n          this.$swal.fire('Erreur', this.errorMsg, 'error');\n          this.userReset.data.email = null;\n          this.userReset.data.oldPassWord = null;\n          this.userReset.data.newPassWord = null;\n        }\n      }).catch(e => {\n        this.$swal.fire('Erreur', e, 'error');\n        this.userReset.data.email = null;\n        this.userReset.data.oldPassWord = null;\n        this.userReset.data.newPassWord = null;\n      }).finally(() => {\n        this.overlay = false;\n      });\n    }\n  },\n  computed: {\n    //GESTION DES CHAMPS UTILISATEURS\n\n    oldPasswordError() {\n      const errors = [];\n      if (!this.$v.userParams.oldPassWord.$dirty) return errors;\n      !this.$v.userParams.oldPassWord.required && errors.push('Entrer l\\'ancien mot de passe.');\n      return errors;\n    },\n    newPasswordError() {\n      const errors = [];\n      if (!this.$v.userParams.newPassWord.$dirty) return errors;\n      !this.$v.userParams.newPassWord.required && errors.push('Le nouveau mot de passe est obligatoire.');\n      return errors;\n    }\n  },\n  mounted() {\n    this.retrieveUserInfo();\n  }\n};","map":{"version":3,"mappings":";AA0CA;AACA;AACA;AACA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MAEAC;MACAC;MAEAC;QACAC;QACAC;QACAC;MACA;MAEAC;QACAV;UACAO;UACAC;UACAC;QACA;MACA;IACA;EACA;EAEAE;IACAL;MACAE;QACAI;MACA;MACAH;QACAG;MACA;IACA;EACA;EAEAC;IAEA;MACA;AACA;AACA;MACA;QACA;MACA;IACA;IAEA;IACAC;MACA;MACA,4FACA;IACA;IAGA;IACA;MACA;MACA;MACA;MACA;MACA;QAAAC;MAAA;QACA;UACA;YACA;YACA;YACA;YACA;YACA;UACA;YACA;YACA;YACA;YACA;YACA;UACA;QAEA,OACA;UACA;UACA;UACA;UACA;UACA;QACA,OACA;UACA;UACA;UACA;UACA;UACA;QACA;MACA;QACA;QACA;QACA;QACA;MACA;QACA;MACA;IACA;EAEA;EAEAC;IAEA;;IAEAC;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;IACA;EAEA;EAEAC;IACA;EACA;AACA","names":["name","data","errorMsg","successMsg","overlay","oldPasswordIsVisible","newPasswordIsVisible","userParams","email","oldPassWord","newPassWord","userReset","validations","required","methods","submitForm","headers","computed","oldPasswordError","newPasswordError","mounted"],"sourceRoot":"src/components/administration_compagnie_transport","sources":["changerPasswordCompagnieTransport.vue"],"sourcesContent":["<template>\n    <v-app>\n        <v-form @submit.prevent=\"submitForm\">\n            <v-card class=\"mx-auto\" max-width=\"700\">\n                <v-card-title><h4>CHANGER LE MOT DE PASSE</h4></v-card-title>\n                <v-card-subtitle>Changer votre de passe pour une meilleur sécurité</v-card-subtitle>\n                <v-card-text>\n                    <v-container>\n                        <v-row>\n                            <v-col><v-text-field disabled class=\"myInput\" v-model=\"userParams.email\" label=\"E-mail\" outlined dense></v-text-field></v-col>\n                        </v-row>\n\n                        <v-row>\n                            <v-col>\n                                <v-text-field :error-messages=\"oldPasswordError\" v-model.trim=\"$v.userParams.oldPassWord.$model\" :append-icon=\"oldPasswordIsVisible ? 'mdi-eye' : 'mdi-eye-off'\"  class=\"input_field myInput\"\n                                    @click:append=\"oldPasswordIsVisible = !oldPasswordIsVisible\" label=\"Votre mot de passe actuel\"\n                                    dense outlined prepend-inner-icon=\"mdi-lock-check\" color=\"primary\" :type=\"oldPasswordIsVisible ? 'text' : 'password'\">\n                                </v-text-field>\n                            </v-col>\n                            <v-col>\n                                <v-text-field :error-messages=\"newPasswordError\" v-model.trim=\"$v.userParams.newPassWord.$model\" :append-icon=\"newPasswordIsVisible ? 'mdi-eye' : 'mdi-eye-off'\"  class=\"input_field myInput\"\n                                    @click:append=\"newPasswordIsVisible = !newPasswordIsVisible\" label=\"Votre nouveau mot de passe\"\n                                    dense outlined prepend-inner-icon=\"mdi-lock-check\" color=\"primary\" :type=\"newPasswordIsVisible ? 'text' : 'password'\">\n                                </v-text-field>\n                            </v-col>\n                        </v-row>\n                    </v-container>\n                </v-card-text>\n\n                <v-card-actions>\n                    <v-btn type=\"button\" small outlined color=\"secondary\">REINITIALISER</v-btn>\n                    <v-btn type=\"submit\" text small outlined color=\"primary\">VALIDER LES MODIFICATIONS</v-btn>\n                </v-card-actions>\n            </v-card>\n        </v-form>\n        <v-alert class=\"myalert alert-error\" type=\"error\" width=\"350px\" dismissible>{{ errorMsg }}</v-alert>\n        <v-alert class=\"myalert alert-success\" type=\"success\" width=\"350px\" dismissible>{{ successMsg }}</v-alert>\n        <v-overlay :value=\"overlay\"><v-progress-circular indeterminate size=\"64\"></v-progress-circular></v-overlay>\n    </v-app>\n</template>\n\n<script>\nimport { API_RESET_PASSWORD_USER , HEADERS } from '../globalConfig/globalConstConfig';\nimport axios from 'axios';\nimport { required } from 'vuelidate/lib/validators'\nexport default {\n    name:\"changerPassword\",\n    data(){\n        return{\n            errorMsg : null,\n            successMsg : null,\n            overlay: null, \n\n            oldPasswordIsVisible : false,\n            newPasswordIsVisible : false , \n\n            userParams:{\n                email: null,\n                oldPassWord: null,\n                newPassWord:null\n            },\n\n            userReset:{\n                data:{\n                    email:null,\n                    oldPassWord : null,\n                    newPassWord : null, \n                }\n            }\n        }\n    },\n\n    validations:{\n        userParams:{\n            oldPassWord:{\n                required\n            },\n            newPassWord:{\n                required\n            }\n        }\n    },\n\n    methods:{\n\n        async retrieveUserInfo(){\n            /**\n             * RECUPERER LES DONNEES UTILISATEURS\n             */\n            if (this.$store.state.userAuthentified !== null) {\n                this.userParams.email = this.$store.state.userAuthentified.email;\n            }\n        },\n\n        // SOUMISSION DU FORMULAIRE\n        submitForm(){\n            this.$v.$touch();\n            if(this.$v.userParams.$invalid) this.errorMsg = \"Vous avez omis des champs de saisie\" \n            else this.resetPasswordUser();\n        },\n\n\n        //CHANGER DE MOT DE PASSE\n        async resetPasswordUser(){\n            this.overlay = true ;\n            this.userReset.data.email = this.userParams.email;\n            this.userReset.data.oldPassWord = this.userParams.oldPassWord;\n            this.userReset.data.newPassWord = this.userParams.newPassWord;\n            await axios.post(API_RESET_PASSWORD_USER, this.userReset , { headers : HEADERS(this.$store.state.userAuthentified.token) } ).then((response) => {\n                if (response.status == 200) {\n                    if (response.data.status.code == 800) {\n                        this.successMsg = response.data.status.message\n                        this.$swal.fire('Mot de Passe modifié' , this.successMsg , 'success')\n                        this.userReset.data.email = null;\n                        this.userReset.data.oldPassword = null;\n                        this.userReset.data.newPassword = null;\n                    }else{\n                        this.errorMsg = response.data.status.message\n                        this.$swal.fire('Erreur' , this.errorMsg , 'error')\n                        this.userReset.data.email = null;\n                        this.userReset.data.oldPassWord = null;\n                        this.userReset.data.newPassWord = null;\n                    }  \n                    \n                }\n                else if (response.status == 204) {\n                    this.warningMsg = \"Erreur , lors de la création\";\n                    this.$swal.fire('Erreur' , this.warningMsg , 'warning')\n                    this.userReset.data.email = null;\n                    this.userReset.data.oldPassWord = null;\n                    this.userReset.data.newPassWord = null;\n                }\n                else{\n                    this.errorMsg = \"Erreur , opération de création impossible\";\n                    this.$swal.fire('Erreur' , this.errorMsg , 'error')\n                    this.userReset.data.email = null;\n                    this.userReset.data.oldPassWord = null;\n                    this.userReset.data.newPassWord = null;\n                }\n            }).catch((e) => {\n                this.$swal.fire('Erreur' , e , 'error')\n                this.userReset.data.email = null;\n                this.userReset.data.oldPassWord = null;\n                this.userReset.data.newPassWord = null;\n            }).finally(() => {\n                this.overlay = false;\n            })\n        }\n\n    },\n\n    computed:{\n\n        //GESTION DES CHAMPS UTILISATEURS\n\n        oldPasswordError(){\n            const errors = [];\n            if (!this.$v.userParams.oldPassWord.$dirty) return errors\n            !this.$v.userParams.oldPassWord.required && errors.push('Entrer l\\'ancien mot de passe.')\n            return errors \n        },\n\n        newPasswordError(){\n            const errors = [];\n            if (!this.$v.userParams.newPassWord.$dirty) return errors\n            !this.$v.userParams.newPassWord.required && errors.push('Le nouveau mot de passe est obligatoire.')\n            return errors \n        },\n\n    },\n\n    mounted(){\n        this.retrieveUserInfo();\n    }\n}\n</script>\n\n<style scoped>\n    .myalert{\n        display: none;\n        z-index: 1900;\n    }\n\n    .alert-success{\n        position: fixed;\n        top: 25px;\n        right:2%;\n        width: 25%;\n    }\n\n    .alert-error{\n        position: fixed;\n        top: 25px;\n        right:2%;\n        width: 25%;\n    }\n\n    .alert-warning{\n        position: fixed;\n        top: 25px;\n        right:2%;\n        width: 25%;\n    }\n\n    .myInput{\n        font-weight: bolder;\n        color: grey;\n        font-size: 15px;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}