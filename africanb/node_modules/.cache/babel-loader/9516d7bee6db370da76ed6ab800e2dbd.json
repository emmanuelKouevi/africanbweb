{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { API_UPDATE_USER, HEADERS } from '../globalConfig/globalConstConfig';\nimport { required, minLength } from 'vuelidate/lib/validators';\nimport $ from 'jquery';\nexport default {\n  name: \"userProfil\",\n  data() {\n    return {\n      errorMsg: null,\n      successMsg: null,\n      overlay: null,\n      userDataUpdating: {\n        datas: []\n      },\n      userUpdating: {\n        id: null,\n        nom: null,\n        prenoms: null,\n        login: null\n      },\n      userUpdatingMail: null\n    };\n  },\n  validations: {\n    userUpdating: {\n      nom: {\n        required,\n        minLength: minLength(2)\n      },\n      prenoms: {\n        required,\n        minLength: minLength(2)\n      },\n      login: {\n        required,\n        minLength: minLength(2)\n      }\n    }\n  },\n  methods: {\n    // SOUMETTRE FORMULAIRE\n    submitForm() {\n      this.$v.$touch();\n      if (this.$v.userUpdating.$invalid) this.errorMsg = 'Certains champs sont requis';else this.updateUserProfil();\n    },\n    async retrieveUserInfo() {\n      /**\n       * RECUPERER LES DONNÉES UTILISATEURS\n       */\n      if (this.$store.state.userAuthentified !== null) {\n        this.userUpdating.id = this.$store.state.userAuthentified.id;\n        this.userUpdating.nom = this.$store.state.userAuthentified.nom;\n        this.userUpdating.prenoms = this.$store.state.userAuthentified.prenoms;\n        this.userUpdating.login = this.$store.state.userAuthentified.login;\n        this.userUpdatingMail = this.$store.state.userAuthentified.email;\n      }\n    },\n    //MODIFIER COMPTE UTILISATEUR\n    async updateUserProfil() {\n      this.overlay = true;\n      this.userDataUpdating.datas.push(this.userUpdating);\n      await axios.put(API_UPDATE_USER, this.userDataUpdating, {\n        headers: HEADERS(this.$store.state.userAuthentified.token)\n      }).then(response => {\n        if (response.status == 200) {\n          if (response.data.status.code == 800) {\n            this.successMsg = response.data.status.message;\n            this.$swal.fire('Modification reussie', this.successMsg, 'success');\n            this.userDataUpdating.datas = [];\n            this.$store.commit('UPDATE_USER_PROFIL', response.data.items[0]);\n          } else {\n            this.errorMsg = response.data.status.message;\n            this.$swal.fire('Operation Echoué', this.errorMsg, 'error');\n            this.userDataUpdating.datas = [];\n          }\n        } else if (response.status == 204) {\n          this.warningMsg = \"Erreur , lors de la création\";\n          $(\".alert-warning\").fadeIn();\n          setTimeout(function () {\n            $(\".alert-warning\").fadeOut();\n          }, 3000);\n          this.userDataUpdating.datas = [];\n        } else {\n          this.errorMsg = \"Erreur , opération de création impossible\";\n          $(\".alert-error\").fadeIn();\n          setTimeout(function () {\n            $(\".alert-error\").fadeOut();\n          }, 3000);\n          this.userDataUpdating.datas = [];\n        }\n      }).catch(e => {\n        this.$swal.fire('Operation Echoué', e, 'error');\n        this.userDataToSend.datas = [];\n      }).finally(() => {\n        this.overlay = false;\n      });\n    }\n  },\n  computed: {\n    //CONTRAINTES SUR LES CHAMPS DE SAISIES\n\n    usernameError() {\n      const errors = [];\n      if (!this.$v.userUpdating.nom.$dirty) return errors;\n      !this.$v.userUpdating.nom.required && errors.push('Le nom de l\\'utilsateur est obligatoire.');\n      !this.$v.userUpdating.nom.minLength && errors.push('Au moins 2 caractères.');\n      return errors;\n    },\n    surnameError() {\n      const errors = [];\n      if (!this.$v.userUpdating.prenoms.$dirty) return errors;\n      !this.$v.userUpdating.prenoms.required && errors.push('Le prenom de l\\'utilsateur est obligatoire.');\n      !this.$v.userUpdating.prenoms.minLength && errors.push('Au moins 2 caractères.');\n      return errors;\n    },\n    loginError() {\n      const errors = [];\n      if (!this.$v.userUpdating.login.$dirty) return errors;\n      !this.$v.userUpdating.login.required && errors.push('Le login de l\\'utilsateur est obligatoire.');\n      !this.$v.userUpdating.login.minLength && errors.push('Au moins 2 caractères.');\n      return errors;\n    }\n  },\n  mounted() {\n    this.retrieveUserInfo();\n  }\n};","map":{"version":3,"mappings":";AAiCA;AACA;AACA;AACA;AACA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MAEAC;QACAC;MACA;MAEAC;QACAC;QACAC;QACAC;QACAC;MACA;MAEAC;IACA;EACA;EAEAC;IACAN;MACAE;QACAK;QACAC;MACA;MACAL;QACAI;QACAC;MACA;MACAJ;QACAG;QACAC;MACA;IACA;EACA;EAEAC;IAEA;IACAC;MACA;MACA,sFACA;IACA;IAEA;MACA;AACA;AACA;MACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IAEA;IACA;MACA;MACA;MACA;QAAAC;MAAA;QACA;UACA;YACA;YACA;YACA;YACA;UACA;YACA;YACA;YACA;UACA;QAEA,OACA;UACA;UACAC;UACAC;YACAD;UACA;UACA;QACA,OACA;UACA;UACAA;UACAC;YACAD;UACA;UACA;QACA;MACA;QACA;QACA;MACA;QACA;MACA;IACA;EAEA;EAEAE;IACA;;IAEAC;MACA;MACA;MACA;MACA;MACA;IACA;IAGAC;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;IACA;EACA;EAEAC;IACA;EACA;AACA","names":["name","data","errorMsg","successMsg","overlay","userDataUpdating","datas","userUpdating","id","nom","prenoms","login","userUpdatingMail","validations","required","minLength","methods","submitForm","headers","$","setTimeout","computed","usernameError","surnameError","loginError","mounted"],"sourceRoot":"src/components/administrateur_societe","sources":["userProfil.vue"],"sourcesContent":["<template>\n    <v-app>\n        <v-form @submit.prevent=\"submitForm\">\n            <v-card class=\"mx-auto\" max-width=\"1000\">\n                <v-card-title><h4>MON PROFIL</h4></v-card-title>\n                <v-card-subtitle>Modifier votre compte utilisateur</v-card-subtitle>\n                <v-card-text>\n                    <v-container>\n                        <v-row>\n                            <v-col><v-text-field class=\"myInput\" :error-messages=\"usernameError\" v-model.trim=\"$v.userUpdating.nom.$model\" label=\"Nom\" outlined dense></v-text-field></v-col>\n                            <v-col><v-text-field class=\"myInput\" :error-messages=\"surnameError\" v-model.trim=\"$v.userUpdating.prenoms.$model\" label=\"Prénom\" outlined dense></v-text-field></v-col>\n                        </v-row>\n\n                        <v-row>\n                            <v-col><v-text-field class=\"myInput\" :error-messages=\"loginError\" v-model.trim=\"$v.userUpdating.login.$model\" label=\"Login ou Pseudo\" outlined dense></v-text-field></v-col>\n                            <v-col><v-text-field disabled class=\"myInput\" v-model=\"userUpdatingMail\" label=\"E-mail\" outlined dense></v-text-field></v-col>\n                        </v-row>\n                    </v-container>\n                </v-card-text>\n\n                <v-card-actions>\n                    <v-btn type=\"button\" small outlined color=\"secondary\">REINITIALISER</v-btn>\n                    <v-btn type=\"submit\" text small outlined color=\"primary\">ENREGISTRER LES MODIFICATIONS</v-btn>\n                </v-card-actions>\n            </v-card>\n        </v-form>\n        <v-alert class=\"myalert alert-error\" type=\"error\" width=\"350px\" dismissible>{{ errorMsg }}</v-alert>\n        <v-alert class=\"myalert alert-success\" type=\"success\" width=\"350px\" dismissible>{{ successMsg }}</v-alert>\n        <v-overlay :value=\"overlay\"><v-progress-circular indeterminate size=\"64\"></v-progress-circular></v-overlay>\n    </v-app>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { API_UPDATE_USER ,HEADERS } from '../globalConfig/globalConstConfig';\nimport {required , minLength} from 'vuelidate/lib/validators';\nimport $ from 'jquery';\nexport default {\n    name:\"userProfil\",\n    data(){\n        return{\n            errorMsg : null,\n            successMsg : null,\n            overlay : null,\n\n            userDataUpdating:{\n                datas:[]\n            },\n\n            userUpdating:{\n                id:null,\n                nom : null,\n                prenoms : null,\n                login : null\n            },\n\n            userUpdatingMail:null\n        }\n    },\n\n    validations:{\n        userUpdating:{\n            nom:{\n                required,\n                minLength : minLength(2)\n            },\n            prenoms:{\n                required,\n                minLength : minLength(2)\n            },\n            login:{\n                required,\n                minLength : minLength(2)\n            }\n        }\n    },  \n\n    methods:{\n\n        // SOUMETTRE FORMULAIRE\n        submitForm(){\n            this.$v.$touch()\n            if(this.$v.userUpdating.$invalid)this.errorMsg = 'Certains champs sont requis';\n            else this.updateUserProfil();\n        },\n\n        async retrieveUserInfo(){\n            /**\n             * RECUPERER LES DONNÉES UTILISATEURS\n             */\n            if (this.$store.state.userAuthentified !== null) {\n                this.userUpdating.id = this.$store.state.userAuthentified.id;\n                this.userUpdating.nom = this.$store.state.userAuthentified.nom;\n                this.userUpdating.prenoms = this.$store.state.userAuthentified.prenoms;\n                this.userUpdating.login = this.$store.state.userAuthentified.login;\n                this.userUpdatingMail = this.$store.state.userAuthentified.email\n            }\n        },\n\n        //MODIFIER COMPTE UTILISATEUR\n        async updateUserProfil(){\n            this.overlay = true;\n            this.userDataUpdating.datas.push(this.userUpdating)\n            await axios.put(API_UPDATE_USER, this.userDataUpdating , { headers : HEADERS(this.$store.state.userAuthentified.token) } ).then((response) => {\n                if (response.status == 200) {\n                    if (response.data.status.code == 800) {\n                        this.successMsg = response.data.status.message\n                        this.$swal.fire('Modification reussie' , this.successMsg , 'success')\n                        this.userDataUpdating.datas = [];\n                        this.$store.commit('UPDATE_USER_PROFIL' , response.data.items[0])\n                    }else{\n                        this.errorMsg = response.data.status.message\n                        this.$swal.fire('Operation Echoué' ,this.errorMsg, 'error')\n                        this.userDataUpdating.datas = [];\n                    }  \n                    \n                }\n                else if (response.status == 204) {\n                    this.warningMsg = \"Erreur , lors de la création\";\n                    $(\".alert-warning\").fadeIn();\n                    setTimeout(function(){\n                        $(\".alert-warning\").fadeOut(); \n                    }, 3000)\n                    this.userDataUpdating.datas = [];\n                }\n                else{\n                    this.errorMsg = \"Erreur , opération de création impossible\";\n                    $(\".alert-error\").fadeIn();\n                    setTimeout(function(){\n                        $(\".alert-error\").fadeOut(); \n                    }, 3000)\n                    this.userDataUpdating.datas = [];\n                }\n            }).catch((e) => {\n                this.$swal.fire('Operation Echoué' , e , 'error')\n                this.userDataToSend.datas = [];\n            }).finally(() => {\n                this.overlay = false;\n            })\n        }\n\n    },\n\n    computed:{\n        //CONTRAINTES SUR LES CHAMPS DE SAISIES\n\n        usernameError(){\n            const errors = [];\n            if (!this.$v.userUpdating.nom.$dirty) return errors\n            !this.$v.userUpdating.nom.required && errors.push('Le nom de l\\'utilsateur est obligatoire.')\n            !this.$v.userUpdating.nom.minLength && errors.push('Au moins 2 caractères.')\n            return errors \n        },\n\n\n        surnameError(){\n            const errors = [];\n            if (!this.$v.userUpdating.prenoms.$dirty) return errors\n            !this.$v.userUpdating.prenoms.required && errors.push('Le prenom de l\\'utilsateur est obligatoire.')\n            !this.$v.userUpdating.prenoms.minLength && errors.push('Au moins 2 caractères.')\n            return errors \n        },\n\n        loginError(){\n            const errors = [];\n            if (!this.$v.userUpdating.login.$dirty) return errors\n            !this.$v.userUpdating.login.required && errors.push('Le login de l\\'utilsateur est obligatoire.')\n            !this.$v.userUpdating.login.minLength && errors.push('Au moins 2 caractères.')\n            return errors \n        },\n    },\n\n    mounted(){\n        this.retrieveUserInfo();\n    }\n}\n</script>\n\n<style scoped>\n    .myalert{\n        display: none;\n        z-index: 1900;\n    }\n\n    .alert-success{\n        position: fixed;\n        top: 25px;\n        right:2%;\n        width: 25%;\n    }\n\n    .alert-error{\n        position: fixed;\n        top: 25px;\n        right:2%;\n        width: 25%;\n    }\n\n    .alert-warning{\n        position: fixed;\n        top: 25px;\n        right:2%;\n        width: 25%;\n    }\n\n    .myInput{\n        font-weight: bolder;\n        color: grey;\n        font-size: 15px;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}